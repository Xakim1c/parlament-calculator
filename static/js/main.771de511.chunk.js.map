{"version":3,"sources":["logo.svg","electionsConfig.js","components/Parties.js","App.js","serviceWorker.js","index.js","components/Биримдик.svg"],"names":["module","exports","electionsConfig","cutoff","totalChairs","parties","against_all_cutoff","against_all_message","cutoff_message","against_all_reached_message","distribute_all_votes_message","Parties","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","props","voteNumberOnChange","event","console","log","target","id","party","state","voteResult","Number","value","setState","calculateResults","changedParty","percentSum","totalPassedParlamentPercent","Object","keys","map","percentsLeft","parlamentResultPercents","parlamentResultChairs","message","toFixed","againstAllReached","defaultState","partyInfo","isAgainstAllReached","this","List","dense","className","labelId","ListItem","key","button","ListItemAvatar","Avatar","src","birimdik","variant","ListItemText","primary","TextField","type","onChange","label","disabled","React","Component","svg","require","parliamentSVG","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.771de511.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const electionsConfig = {\n    cutoff: 7,\n    totalChairs: 120,\n    parties: [\"Биримдик\", \n              \"Мекенчил\", \n              \"Ыйман Нуру\", \n              \"Мекеним Кыргызстан\", \n              \"Реформа\", \n              \"Ата Мекен\", \n              \"Замандаш\", \n              \"Бутун Кыргызстан\", \n              \"Социал-демократы\", \n              \"Мекен Ынтымагы\", \n              \"Политическая партия ветеранов войны в Афганистане и участников других боевых конфликтов\", \n              \"Ордо\", \n              \"Бир Бол\", \n              \"Республика\", \n              \"Кыргызстан\", \n              \"Чон казат\", \n              \"Против всех\"],\n    against_all_cutoff: \"50\",\n    against_all_message: \"Пока процент голосов против всех не достигнет барьера, это эти голоса по сути только помогают лидирующим партиям получить больше мест. Барьер того, чтобы голоса против всех начали влиять на что-то равен \",\n    cutoff_message: \"Партия не получит мест в парламенте пока не преодолеет барьер в \",\n    against_all_reached_message: \"при достижении такого процента голосов против всех, назначаются новые выборы, но в них могут участвовать те же партии\",\n    distribute_all_votes_message: \"Распределите 100% голосов между партиями, чтобы увидеть, какая партия получит сколько мест в парламенте\"\n  }\n\nexport default electionsConfig","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\nimport TextField from '@material-ui/core/TextField';\n\nimport electionsConfig from '../electionsConfig'\n\nimport birimdik from './Биримдик.svg';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n})); \n\nclass Parties extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let defaultState = {}\n\n        defaultState.percentsLeft=100\n        defaultState.againstAllReached = false\n\n        let parties = {}\n        electionsConfig.parties.map((value) => {\n\n            let partyInfo = {}\n\n            partyInfo.voteResult = 0\n            partyInfo.parlamentResultChairs = 0\n            partyInfo.parlamentResultPercents = 0\n            partyInfo.message = ''\n\n            parties[value]=partyInfo\n        })\n\n        defaultState.parties = parties\n\n        this.state = defaultState;\n      }    \n\n    voteNumberOnChange = (event) => {\n        console.log(event.target.id)\n\n        const party = event.target.id\n        const parties = {...this.state.parties}  \n        parties[party].voteResult = Number(event.target.value)\n\n        this.setState( {parties: parties} )\n\n        console.log(parties)\n        console.log(this.state)\n\n        //Percents left\n        this.calculateResults(party)\n    }\n\n    calculateResults = (changedParty) => {\n\n        let percentSum = 0\n        let totalPassedParlamentPercent = 0\n\n        Object.keys(this.state.parties).map((party) => {\n            console.log(party)\n\n            let voteResult = this.state.parties[party].voteResult\n            percentSum = percentSum + voteResult\n\n            if (voteResult > electionsConfig.cutoff){\n                totalPassedParlamentPercent = totalPassedParlamentPercent + voteResult     \n            }\n\n         })     \n         \n        let percentsLeft = 100 - percentSum\n        this.setState( {percentsLeft: percentsLeft} )\n\n        const parties = {...this.state.parties} \n\n        if (percentsLeft == 0) {                     \n\n            //this.setState( {parties: parties} )\n            Object.keys(this.state.parties).map((party) => {\n                console.log(party)\n    \n                let voteResult = this.state.parties[party].voteResult\n                percentSum = percentSum + voteResult\n    \n\n                let parlamentResultPercents = 0  \n                let parlamentResultChairs = 0 \n                let message = electionsConfig.cutoff_message + ' ' + electionsConfig.cutoff + '%'\n\n                if (voteResult > electionsConfig.cutoff){\n                    parlamentResultPercents = voteResult * 100 / totalPassedParlamentPercent  \n                    parlamentResultChairs = electionsConfig.totalChairs * parlamentResultPercents / 100 \n                    message = ''\n                } \n\n                parties[party].parlamentResultPercents = parlamentResultPercents\n                //parties[party].parlamentResultChairs = Math.round(parlamentResultChairs)\n                parties[party].parlamentResultChairs = Number(parlamentResultChairs).toFixed(1)\n                parties[party].message = message\n            })             \n        } else {\n            \n            this.setState( {parties: parties} )\n            Object.keys(this.state.parties).map((party) => {\n                console.log(party)\n\n                parties[party].parlamentResultPercents = 0\n                parties[party].parlamentResultChairs = 0\n                parties[party].message = ''\n            })             \n        }  \n\n        //Против всех\n        if (parties['Против всех'].parlamentResultPercents < electionsConfig.against_all_cutoff) {\n            parties['Против всех'].message = electionsConfig.against_all_message   \n            this.setState( {againstAllReached: false} ) \n        } else {\n            parties['Против всех'].message = ''\n            this.setState( {againstAllReached: true} )\n        }\n        \n        this.setState( {parties: parties} )\n    }\n\n    render() {\n\n        const isAgainstAllReached = this.state.againstAllReached;\n\n        return (\n            <div> \n                <div>Осталось распределить: {this.state.percentsLeft}</div>  \n\n                <b>{isAgainstAllReached ? electionsConfig.against_all_reached_message : ''}</b>\n\n                <List dense className={'Parties'}>\n                {electionsConfig.parties.map((value) => {\n                    const labelId = `label-${value}`;\n                    return (\n                    <ListItem key={value} button>\n                        <ListItemAvatar>\n                        <Avatar\n                            //alt={`Avatar n°${value}`}\n                            src={birimdik}\n                            variant=\"square\"\n                        />\n                        </ListItemAvatar>\n                        <ListItemText id={labelId} primary={value} />\n                        \n                        <TextField  \n                            id={value} \n                            type ='number'                            \n                            onChange={this.voteNumberOnChange}\n                            label=\"Процент голосов\" \n                            variant=\"outlined\" /> \n\n                        <TextField  \n                            id={value} \n                            value={this.state.parties[value].parlamentResultChairs}\n                            disabled={true}\n                            onChange={this.voteNumberOnChange}\n                            label=\"Мест в парламенте\" \n                            variant=\"outlined\" /> \n\n                        <div>{this.state.parties[value].message}</div>\n\n                    </ListItem>\n                    );\n                })}\n                </List>                       \n            </div>\n          );\n        }\n    }    \n\nexport default Parties","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport electionsConfig from './electionsConfig'\nimport Parties from './components/Parties'\n\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport { useInterval } from 'react';\nimport { generateDataset } from 'react';\nimport { d3 } from 'react';\n\nconst parliamentSVG = require('parliament-svg')\n\nlet parties = \n{\n\t\"linke\": {\n\t\t\"seats\": 64,\n\t\t\"colour\": \"#a08\"\n\t},\n\t\"spd\": {\n\t\t\"seats\": 193,\n\t\t\"colour\": \"#e02\"\n\t},\n\t\"gruene\": {\n\t\t\"seats\": 63,\n\t\t\"colour\": \"#0b2\"\n\t},\n\t\"union\": {\n\t\t\"seats\": 311,\n\t\t\"colour\": \"#333\"\n\t}\n}\n\nconst Circles = () => {\n\tconst [dataset, setDataset] = useState(\n\t  generateDataset()\n\t)\n\tconst ref = useRef()\n  \n\tuseEffect(() => {\n\t  const svgElement = d3.select(ref.current)\n\t  svgElement.selectAll(\"circle\")\n\t\t.data(dataset)\n\t\t.join(\"circle\")\n\t\t  .attr(\"cx\", d => d[0])\n\t\t  .attr(\"cy\", d => d[1])\n\t\t  .attr(\"r\",  3)\n\t}, [dataset])\n  \n\tuseInterval(() => {\n\t  const newDataset = generateDataset()\n\t  setDataset(newDataset)\n\t}, 2000)\n  \n\treturn (\n\t  <svg\n\t\tviewBox=\"0 0 100 50\"\n\t\tref={ref}\n\t  />\n\t)\n  }\n\nconst svg = parliamentSVG(parties, true)\nconsole.log(JSON.stringify(svg))\n\nconsole.log(svg)\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      \n      <div>{electionsConfig.distribute_all_votes_message}</div>\n\n      <Parties></Parties>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Биримдик.2b29198c.svg\";"],"sourceRoot":""}