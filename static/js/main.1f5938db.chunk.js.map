{"version":3,"sources":["components/Биримдик.svg","logo.svg","electionsConfig.js","components/Parties.js","components/ParlamentChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","electionsConfig","cutoff","totalChairs","parties","against_all_cutoff","against_all_message","cutoff_message","against_all_reached_message","distribute_all_votes_message","Parties","props","voteNumberOnChange","event","console","log","target","id","party","state","voteResult","Number","value","setState","calculateResults","changedParty","percentSum","totalPassedParlamentPercent","Object","keys","map","percentsLeft","toFixed","parlamentResultPercents","parlamentResultChairs","message","againstAllReached","defaultState","partyInfo","isAgainstAllReached","this","List","dense","className","labelId","ListItem","key","button","ListItemAvatar","Avatar","src","birimdik","variant","ListItemText","primary","TextField","type","onChange","label","disabled","React","Component","ItemSeriesModule","Highcharts","options","chart","title","text","subtitle","legend","labelFormat","series","name","data","dataLabels","enabled","format","center","size","startAngle","endAngle","ParlamentChart","highcharts","constructorType","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1f5938db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Биримдик.2b29198c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const electionsConfig = {\n    cutoff: 7,\n    totalChairs: 120,\n    parties: [\"Биримдик\", \n              \"Мекенчил\", \n              \"Ыйман Нуру\", \n              \"Мекеним Кыргызстан\", \n              \"Реформа\", \n              \"Ата Мекен\", \n              \"Замандаш\", \n              \"Бутун Кыргызстан\", \n              \"Социал-демократы\", \n              \"Мекен Ынтымагы\", \n              \"Политическая партия ветеранов войны в Афганистане и участников других боевых конфликтов\", \n              \"Ордо\", \n              \"Бир Бол\", \n              \"Республика\", \n              \"Кыргызстан\", \n              \"Чон казат\", \n              \"Против всех\"],\n    against_all_cutoff: \"50\",\n    against_all_message: \"Пока процент голосов против всех не достигнет барьера, это эти голоса по сути только помогают лидирующим партиям получить больше мест. Барьер того, чтобы голоса против всех начали влиять на что-то равен \",\n    cutoff_message: \"Партия не получит мест в парламенте пока не преодолеет барьер в \",\n    against_all_reached_message: \"при достижении такого процента голосов против всех, назначаются новые выборы, но в них могут участвовать те же партии\",\n    distribute_all_votes_message: \"Распределите 100% голосов между партиями, чтобы увидеть, какая партия получит сколько мест в парламенте\"\n  }\n\nexport default electionsConfig","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport TextField from '@material-ui/core/TextField';\n\nimport electionsConfig from '../electionsConfig'\n\nimport birimdik from './Биримдик.svg';\n\nclass Parties extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let defaultState = {}\n\n        defaultState.percentsLeft=100\n        defaultState.againstAllReached = false\n\n        let parties = {}\n        electionsConfig.parties.map((value) => {\n\n            let partyInfo = {}\n\n            partyInfo.voteResult = 0\n            partyInfo.parlamentResultChairs = 0\n            partyInfo.parlamentResultPercents = 0\n            partyInfo.message = ''\n\n            parties[value]=partyInfo\n        })\n\n        defaultState.parties = parties\n\n        this.state = defaultState;\n      }    \n\n    voteNumberOnChange = (event) => {\n        console.log(event.target.id)\n\n        const party = event.target.id\n        const parties = {...this.state.parties}  \n        parties[party].voteResult = Number(event.target.value)\n\n        this.setState( {parties: parties} )\n\n        console.log(parties)\n        console.log(this.state)\n\n        //Percents left\n        this.calculateResults(party)\n    }\n\n    calculateResults = (changedParty) => {\n\n        let percentSum = 0\n        let totalPassedParlamentPercent = 0\n\n        Object.keys(this.state.parties).map((party) => {\n            console.log(party)\n\n            let voteResult = this.state.parties[party].voteResult\n            percentSum = percentSum + voteResult\n\n            if (voteResult > electionsConfig.cutoff && party != 'Против всех'){\n                totalPassedParlamentPercent = totalPassedParlamentPercent + voteResult     \n            }\n\n         })     \n         \n        let percentsLeft = Number(100 - percentSum).toFixed(2)\n        this.setState( {percentsLeft: percentsLeft} )\n\n        const parties = {...this.state.parties} \n\n        if (percentsLeft == 0) {                     \n\n            Object.keys(this.state.parties).map((party) => {\n                console.log(party)\n    \n                let voteResult = this.state.parties[party].voteResult\n                percentSum = percentSum + voteResult\n    \n\n                let parlamentResultPercents = 0  \n                let parlamentResultChairs = 0 \n                let message = electionsConfig.cutoff_message + ' ' + electionsConfig.cutoff + '%'\n\n                if (voteResult > electionsConfig.cutoff && party != 'Против всех'){\n                    parlamentResultPercents = voteResult * 100 / totalPassedParlamentPercent  \n                    parlamentResultChairs = electionsConfig.totalChairs * parlamentResultPercents / 100 \n                    message = ''\n                } \n\n                parties[party].parlamentResultPercents = parlamentResultPercents\n                //parties[party].parlamentResultChairs = Math.round(parlamentResultChairs)\n                parties[party].parlamentResultChairs = Number(parlamentResultChairs).toFixed(1)\n                parties[party].message = message\n            })             \n        } else {\n            \n            Object.keys(this.state.parties).map((party) => {\n                console.log(party)\n\n                //parties[party].parlamentResultPercents = 0\n                parties[party].parlamentResultChairs = 0\n                parties[party].message = ''\n            })             \n        }  \n\n        //Против всех\n        if (parties['Против всех'].voteResult < electionsConfig.against_all_cutoff)  {\n            console.log('TEST')\n            console.log(percentsLeft)\n            console.log(parties['Против всех'].voteResult)\n            if ((percentsLeft == 0) && (parties['Против всех'].voteResult > 0)){\n                parties['Против всех'].message = electionsConfig.against_all_message                    \n            }else {\n                parties['Против всех'].message = ''\n            }\n            this.setState( {againstAllReached: false} )\n            \n        } else {\n            parties['Против всех'].message = ''\n            this.setState( {againstAllReached: true} )\n        }\n        \n        this.setState( {parties: parties} )\n    }\n\n    render() {\n\n        const isAgainstAllReached = this.state.againstAllReached;\n\n        return (\n            <div> \n                <div>Осталось распределить: {this.state.percentsLeft}</div>  \n\n                <b>{isAgainstAllReached ? electionsConfig.against_all_reached_message : ''}</b>\n\n                <List dense className={'Parties'}>\n                {electionsConfig.parties.map((value) => {\n                    const labelId = `label-${value}`;\n                    return (\n                    <ListItem key={value} button>\n                        <ListItemAvatar>\n                        <Avatar\n                            //alt={`Avatar n°${value}`}\n                            src={birimdik}\n                            variant=\"square\"\n                        />\n                        </ListItemAvatar>\n                        <ListItemText id={labelId} primary={value} />\n                        \n                        <TextField  \n                            id={value} \n                            type ='number'                            \n                            onChange={this.voteNumberOnChange}\n                            label=\"Процент голосов\" \n                            variant=\"outlined\" /> \n\n                        <TextField  \n                            id={value} \n                            value={this.state.parties[value].parlamentResultChairs}\n                            disabled={true}\n                            onChange={this.voteNumberOnChange}\n                            label=\"Мест в парламенте\" \n                            variant=\"outlined\" /> \n\n                        <div>{this.state.parties[value].message}</div>\n\n                    </ListItem>\n                    );\n                })}\n                </List>                       \n            </div>\n          );\n        }\n    }    \n\nexport default Parties","import React from 'react'\n\nimport * as Highcharts from 'highcharts';\nimport ItemSeriesModule from 'highcharts/modules/item-series';\nimport HighchartsReact from 'highcharts-react-official'\n\nItemSeriesModule(Highcharts);\n\nconst options = {\n\n    chart: {\n        type: 'item'\n    },\n\n    title: {\n        text: 'Распределение'\n    },\n\n    subtitle: {\n        text: 'ТЕСТ'\n    },\n\n    legend: {\n        labelFormat: '{name} <span style=\"opacity: 0.4\">{y}</span>'\n    },\n\n    series: [{\n        name: 'Representatives',\n        keys: ['name', 'y', 'color', 'label'],\n        data: [\n            ['TEST', 15, '#BE3075', 'TEST'],\n            ['TEST', 25, '#EB001F', 'TEST'],\n            ['TEST', 30, '#64A12D', 'TEST'],\n            ['TEST', 12, '#FFED00', 'TEST'],\n            ['TEST', 7, '#000000', 'TEST'],\n            ['TEST', 20, '#008AC5', 'TEST'],\n            ['TEST', 35, '#009EE0', 'TEST']\n        ],\n        dataLabels: {\n            enabled: true,\n            format: '{point.label}'\n        },\n\n        // Circular options\n        center: ['50%', '88%'],\n        size: '170%',\n        startAngle: -100,\n        endAngle: 100\n    }]\n}\n\nconst ParlamentChart = () => <HighchartsReact\n  highcharts={Highcharts}\n  constructorType={'chart'}\n  options={options}\n/>\n\nexport default ParlamentChart","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport electionsConfig from './electionsConfig'\nimport Parties from './components/Parties'\n\nimport ParlamentChart from './components/ParlamentChart.js'\n\nfunction App() {\t\n\t\n  return (\n    <div className=\"App\">\n      \n      <div>{electionsConfig.distribute_all_votes_message}</div>\n\n      <Parties></Parties>\n\t  <ParlamentChart></ParlamentChart>\n\t\n\t\t<b>FFF</b>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}